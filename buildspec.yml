version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
      nodejs: 18
    commands:
      - echo "Installing dependencies"
      - npm install -g aws-cdk
      - echo "Installing Python dependencies"
      - cd backend
      - python -m pip install --upgrade pip
      - pip install -r requirements.txt
      - cd $CODEBUILD_SRC_DIR

  pre_build:
    commands:
      - echo "Pre-build phase started"
      - echo "Environment variables:"
      - echo "AWS_ACCOUNT:$AWS_ACCOUNT"
      - echo "AWS_REGION:$AWS_REGION"
      - echo "ENVIRONMENT:$ENVIRONMENT"
      - echo "Current directory:" && pwd
      - echo "Contents:" && ls -la
      - cd backend
      - echo "Now in backend directory for CDK bootstrap"
      - cdk bootstrap --require-approval never --context account=${AWS_ACCOUNT} --context region=${AWS_REGION} || true
      - cd $CODEBUILD_SRC_DIR

  build:
    commands:
      - echo "Build phase started"
      - echo "Current directory:" && pwd
      - cd backend
      - echo "Now in backend directory:" && pwd
      - |
        if [ "$ACTION" = "destroy" ]; then
          echo "Destroying CDK stacks..."
          cdk destroy --all --force \
            -c env=${ENVIRONMENT} \
            -c account=${AWS_ACCOUNT} \
            -c region=${AWS_REGION}
        else
          echo "Synthesizing CDK stack..."
          cdk synth \
            -c env=${ENVIRONMENT} \
            -c account=${AWS_ACCOUNT} \
            -c region=${AWS_REGION}

          echo "Deploying CDK stack..."
          cdk deploy --all --require-approval never \
            -c env=${ENVIRONMENT} \
            -c account=${AWS_ACCOUNT} \
            -c region=${AWS_REGION}
        fi
      - echo "Returning to root directory"
      - cd $CODEBUILD_SRC_DIR
      - echo "Current directory after CDK:" && pwd
      - |
        if [ "$ACTION" != "destroy" ]; then
          echo "CDK deployment completed. Starting frontend configuration and build..."
          
          echo "Creating .env file directly..."
          cd frontend
          
          # Get API URL directly with AWS CLI (no profile)
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name KUEssayGradingStack-${ENVIRONMENT} \
            --region ${AWS_REGION} \
            --query 'Stacks[0].Outputs[?OutputKey==`APIGatewayURL`].OutputValue' \
            --output text 2>/dev/null || echo "")
            
          if [ -n "$API_URL" ] && [ "$API_URL" != "None" ]; then
            BASE_API_URL=$(echo "$API_URL" | sed 's/\/$//')
            echo "Found API URL: $BASE_API_URL"
            
            # Create .env file
            cat > .env << EOF
REACT_APP_ENVIRONMENT=${ENVIRONMENT}
REACT_APP_REGION=${AWS_REGION}
REACT_APP_API_URL=${BASE_API_URL}
REACT_APP_DEBUG=true
REACT_APP_LOG_LEVEL=info
EOF
            echo "Created .env file with API URL"
          else
            echo "Warning: Could not get API URL, using placeholder"
            cat > .env << EOF
REACT_APP_ENVIRONMENT=${ENVIRONMENT}
REACT_APP_REGION=${AWS_REGION}
REACT_APP_API_URL=https://placeholder-api.com
REACT_APP_DEBUG=true
REACT_APP_LOG_LEVEL=info
EOF
          fi
          
          echo "Installing frontend dependencies..."
          npm install
          
          echo "Building React application..."
          npm run build
          
          if [ -f "build/index.html" ]; then
            echo "Frontend build successful. Getting S3 bucket name..."
            
            FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
              --stack-name KUEssayGradingStack-${ENVIRONMENT} \
              --region ${AWS_REGION} \
              --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
              --output text 2>/dev/null || echo "")

            if [ -n "$FRONTEND_BUCKET" ] && [ "$FRONTEND_BUCKET" != "None" ]; then
              echo "Uploading frontend to S3: $FRONTEND_BUCKET"
              aws s3 sync build/ "s3://${FRONTEND_BUCKET}" --delete

              echo "Creating CloudFront invalidation..."
              DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
                --stack-name KUEssayGradingStack-${ENVIRONMENT} \
                --region ${AWS_REGION} \
                --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
                --output text 2>/dev/null || echo "")

              if [ -n "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
                aws cloudfront create-invalidation \
                  --distribution-id "$DISTRIBUTION_ID" \
                  --paths "/*" > /dev/null
                echo "CloudFront invalidation created"
              else
                echo "Warning: Could not create CloudFront invalidation"
              fi
              
              echo "Frontend deployment completed successfully"
            else
              echo "Warning: Could not get frontend bucket name, but continuing..."
              echo "React build completed successfully"
            fi
          else
            echo "Error: Frontend build failed - build/index.html not found"
            exit 1
          fi
        fi

  post_build:
    commands:
      - echo "Post-build phase started"
      - |
        if [ "$ACTION" != "destroy" ]; then
          echo "Getting deployment summary..."
          
          STACK_NAME="KUEssayGradingStack-${ENVIRONMENT}"
          
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region ${AWS_REGION} \
            --query 'Stacks[0].Outputs[?OutputKey==`APIGatewayURL`].OutputValue' \
            --output text 2>/dev/null || echo "Not available")
            
          FRONTEND_URL=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region ${AWS_REGION} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
            --output text 2>/dev/null || echo "Not available")
            
          echo "=========================================="
          echo "DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "=========================================="
          echo "Frontend Application: ${FRONTEND_URL}"
          echo "API Gateway: ${API_URL}"
          echo "Grade Essay Endpoint: ${API_URL}grade-essay"
          echo "Generate Rubric Endpoint: ${API_URL}generate-rubric"
          echo "=========================================="
        fi
      - echo "CDK $ACTION complete."

artifacts:
  files:
    - '**/*'
  name: ku-essay-grading-artifacts